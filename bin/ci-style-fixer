#!/usr/bin/env bash

set -euo pipefail

submodules="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )"

# Include lib functions
. "$submodules"/lib/git.bash
. "$submodules"/lib/github.sh

#######################################
# Fix and stage files
#
# Arguments:
#   1 the files to fix / stage
#######################################
fix_and_stage_styles () {
    local files="$1"

    style-fixer "$files"
    echo "$files" | xargs git add
}

#######################################
# Commits & pushes staged changes and exits with a non-zero exit code.
#
# Arguments:
#   1 the type of changes that are being applied
#######################################
apply_changes_and_exit () {
    local type="$1"

    echo "Found $type changes. Pushing back to branch..."
    git commit --no-verify -m "Apply $type changes"
    git push
    exit 1
}

#######################################
# Filter fixable files
#######################################
get_fixable_files () {
    local files
    local fixable_files=""

    files="$(git diff --diff-filter=CMTRA --name-only origin/master...HEAD)"
    for file in $files
    do
      if echo "$file" | grep -q 'css\|scss\|html\|js\|ts\|php\|java\|feature\|twig'; then
        fixable_files="$fixable_files $file"
      fi
    done
    echo "$fixable_files"
}

git.branch.exit-if-master "Skipping style fixer"

fixable_files=$(get_fixable_files)

if [[ -n "$fixable_files" ]];then
    fix_and_stage_styles "$fixable_files"
fi

git.index.exit_if_empty "No style changes found. Moving on..."

api_response=$(github.pull.get)
git_url=$(github.pull.url.get "$api_response")
git_ref=$(github.pull.ref.get "$api_response")

git.branch.checkout-and-track "$git_url" "$git_ref"

apply_changes_and_exit style
