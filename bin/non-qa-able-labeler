#!/usr/bin/env bash

set -euo pipefail

project_name=$1
repo_name=$2
pull_number=$3
auth_token=$4

# List of repositories considered not QA able
non_qa_able_repos=(
  '.github'
  'BehatFindALabContext'
  'BehatPaypalContext'
  'FlexibleMink'
  'IP-Phone-Provisioning'
  'PaymentProcessor'
  'Scripts'
  'Team-Standards-and-Procedures'
  'behat-google-place-autocomplete'
  'consultation-provider'
  'docker-hub'
  'docker-ng-cli-karma'
  'docker-php-cs-fixer'
  'gae-prune-old-versions-orb'
  'gae-stop-old-versions-orb'
  'geo-location'
  'gherkin-cs-fixer'
  'google-maps-mock-api'
  'iLab-php-client'
  'iLab-php-parser'
  'laravel-sodium'
  'livechat-spinify-bridge'
  'medivo-client'
  'phpunit-parallel-runner'
  'quest-client'
  'spinify-php-client'
  'submodules'
  'wheniwork-php-client'
)

#######################################
# Applies the No QA label to the PR
#
# Globals:
#   auth_token
#   project_name
#   repo_name
#   project_name
#######################################
apply_no_qa_label () {
    echo "Applying No QA label"
    curl -H "Authorization: token $auth_token" \
        -H "Accept: application/vnd.github.shadow-cat-preview+json" \
        -H "Content-Type: application/json" \
        --request POST \
        --data '{"labels": ["No QA"]}' \
        -S "https://api.github.com/repos/$project_name/$repo_name/issues/$pull_number/labels"
}

#######################################
# Removes the No Qa label from the PR
# If the label doesn't exist, curl
# exits 0 and the script goes on
#
# Globals:
#   auth_token
#   project_name
#   repo_name
#   project_name
#######################################
remove_no_qa_label_if_exists () {
    echo "Removing No QA label"
    curl -H "Authorization: token $auth_token" \
        -H "Accept: application/vnd.github.shadow-cat-preview+json" \
        -H "Content-Type: application/json" \
        --request DELETE \
        -S "https://api.github.com/repos/$project_name/$repo_name/issues/$pull_number/labels/No%20QA"
}

#######################################
# Checks if the Repository is QA-able
# If it is not it will add the No QA
# label and exit
#
# Globals:
#   non_qa_able_repos
#   repo_name
#######################################
label_and_exit_if_repo_not_qa_able () {
  local match=0
  for non_qa_able_repo in "${non_qa_able_repos[@]}"; do
      if [[ $non_qa_able_repo = "$repo_name" ]]; then
          match=1
          break
      fi
  done

  if [[ $match = 1 ]]; then
    apply_no_qa_label
  fi
}

#######################################
# Checks the changed files in the PR
# and exits if they are QA able
#######################################
remove_label_and_exit_if_files_are_qa_able () {
  IFS=$'\n'
  for file in $(git diff --name-only origin/master...HEAD)
  do
    local non_comment_updates=""
    local qa_able_files

    set +e
    qa_able_files="$(echo "$file" | grep -v '.feature\|features/\|tests/\|.md\|submodules\|.circleci')"
    set -e

    if [[ ! -f "$file" ]]; then
       non_comment_updates="File was deleted"
    else
       non_comment_updates="$(git diff -G'(^[^\*# /])|(^#\w)|(^\s+[^\*#/])'  origin/master...HEAD "$file")"
    fi

    echo "Checking file $file"

    if [[ -n "$qa_able_files" && -n "$non_comment_updates" ]]; then
        echo ""
        echo "Removing QA label due to: "
        echo "$non_comment_updates"
        echo ""
        remove_no_qa_label_if_exists
        unset IFS
        exit 0
    fi
  done
  unset IFS
}

label_and_exit_if_repo_not_qa_able

remove_label_and_exit_if_files_are_qa_able

apply_no_qa_label
